/// java 自动化 初级
{
    "status": 1,
    "code": "1001",
    "data": {
        "pageIndex": 0,
        "pageSize": 0,
        "stems": [{
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 104,
            "subjectType": 4,
            "content": "设int a=5,b=2;float c=32.8;,表达式b*(int)c%a的值为【】 ",
            "difficultyLevel": 1,
            "type": 1,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-09-23 21:16:52",
            "items": [{
                "id": 277,
                "stemId": 104,
                "content": "设int a=5,b=2;float c=32.8;,表达式b*(int)c%a的值为【】 ",
                "answer": "4"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 128,
            "subjectType": 4,
            "content": "下面的排序算法中，初始数据集的排列顺序对算法的性能无影响的是\r\n",
            "difficultyLevel": 1,
            "type": 1,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-09-23 21:26:11",
            "items": [{
                "id": 301,
                "stemId": 128,
                "content": "A. 插入排序\r\nB. 堆排序\r\nC. 冒泡排序\r\nD. 快速排序",
                "answer": "B"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 47,
            "subjectType": 4,
            "content": "有以下程序\r\nmain（）{\r\nint x=1,y=0;\r\nif(!x)y++;\r\nelse if(x==0)\r\nif(x)y+=2;\r\nelse y+=3;\r\nprintf(\"%d\\n\",y};\r\n}\r\n",
            "difficultyLevel": 1,
            "type": 1,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-09-23 20:28:40",
            "items": [{
                "id": 747,
                "stemId": 47,
                "content": "程序运行后的输出结果是（）\r\nA 3 \r\nB 2 \r\nC 1 \r\nD 0 ",
                "answer": "A"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 44,
            "subjectType": 4,
            "content": "请问，以下哪些Java源文件中顶层元素出现次序？\r\n",
            "difficultyLevel": 1,
            "type": 1,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-09-23 20:26:55",
            "items": [{
                "id": 749,
                "stemId": 44,
                "content": "A import,package,class\r\nB Class,import,package\r\nC Package语句必须位于最前面，import语句和class声明之间无次序要求\r\nD Package，import，class",
                "answer": "D"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 43,
            "subjectType": 4,
            "content": "下面哪个流类属于面向字符的输入流\r\n",
            "difficultyLevel": 1,
            "type": 1,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-09-23 20:26:23",
            "items": [{
                "id": 750,
                "stemId": 43,
                "content": "A bufferedWriter\r\nB fileinputStream\r\nC ObjectinputStream\r\nD inputStreamReader",
                "answer": "D"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 15,
            "subjectType": 4,
            "content": "如下哪个不是基本数据类型\r\n",
            "difficultyLevel": 1,
            "type": 1,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-09-05 20:22:48",
            "items": [{
                "id": 765,
                "stemId": 15,
                "content": "A.int\r\nB.double\r\nC.byte\r\nD.String",
                "answer": "D"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 278,
            "subjectType": 4,
            "content": "请写出String类的包名",
            "difficultyLevel": 1,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-11-10 11:53:52",
            "items": [{
                "id": 938,
                "stemId": 278,
                "content": "请写出String类的包名",
                "answer": "java.lang"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 344,
            "subjectType": 4,
            "content": "请使用自己熟悉的编程语言，实现字符串倒置的一段功能代码。",
            "difficultyLevel": 1,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-11-10 14:12:36",
            "items": [{
                "id": 939,
                "stemId": 344,
                "content": "请使用自己熟悉的编程语言，实现字符串倒置的一段功能代码。",
                "answer": "参考答案：\r\npython语言：\r\na = [1,45,6,90]\r\nb = a[::-1]"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 179,
            "subjectType": 4,
            "content": "关 于 for 循 环 和 while 循 环 的 说 法 哪 个 正 确 ？",
            "difficultyLevel": 1,
            "type": 1,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-09-24 12:19:33",
            "items": [{
                "id": 1026,
                "stemId": 179,
                "content": "A. While 循 环 先 判 断 后 执 行 ， for 循 环 先 执 行 后 判 断 。 \r\nB. While 循 环 判 断 条 件 一 般 是 程 序 结 果 ， for 循 环 的 判 断 条 件 一 般 是 非 程 序结果\r\nC. 两 种 循 环 任 何 时 候 都 不 可 以 替 换 \r\nD. 两 种 循 环 结 构 中 都 必 须 有 循 环 体 ， 循 环 体 不 能 为 空 ",
                "answer": "B"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 85,
            "subjectType": 4,
            "content": "下面哪个跟java有关？",
            "difficultyLevel": 1,
            "type": 1,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-09-23 21:08:38",
            "items": [{
                "id": 1199,
                "stemId": 85,
                "content": "A:KLP\r\nB:GDB\r\nC:DLL\r\nD:eclipse ",
                "answer": "D"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 102,
            "subjectType": 4,
            "content": "队列和栈存取数据的顺序是（ ）\r\n",
            "difficultyLevel": 1,
            "type": 1,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-09-23 21:16:13",
            "items": [{
                "id": 1200,
                "stemId": 102,
                "content": "A. 队列先进后出，栈先进先出\r\nB. 队列先进先出，栈后进先出\r\nC. 队列和栈都是先进先出\r\nD. 队列和栈都是先进后出",
                "answer": "B"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 181,
            "subjectType": 4,
            "content": "下面程序的执行结果：\r\n1*1 =1\r\n2*1 =2 2*2 =4\r\n3*1 =3 3*2 =6 3*3 =9\r\n........\r\n9*1 =9 9*2 =18 9*3 =27  .....\r\npublic class ForLoopStatement {\r\n        public static void main(String[] args) {\r\n\t\tint m,n;\r\n\t\tfor ( m = 0; m < 10; m++) {\r\n\t\t\tfor(__(1)__)\r\n\t\t\t{\r\n\t\t\t\tSystem.out.println(__(2)__);\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t }\r\n\t}\r\n}",
            "difficultyLevel": 1,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-09-24 12:34:32",
            "items": [{
                "id": 1204,
                "stemId": 181,
                "content": "(1) 和(2)应该填写什么",
                "answer": "（1） n = 1;n <= m; n++\r\n（2）n+\"*\"+m+\"=\"+m*n"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 42,
            "subjectType": 4,
            "content": "下面选项中哪个关键字可以用来修饰接口中的变量和方法？\r\n",
            "difficultyLevel": 1,
            "type": 1,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-09-23 20:26:04",
            "items": [{
                "id": 1205,
                "stemId": 42,
                "content": "A Static\r\nB Private\r\nC Protected\r\nD Synchronized",
                "answer": "A"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 425,
            "subjectType": 4,
            "content": "设int a=7，b=5, t执行完表达式t=（a>b）?a:b后，t的值是（）",
            "difficultyLevel": 1,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-11-24 20:49:16",
            "items": [{
                "id": 1294,
                "stemId": 425,
                "content": "设int a=7，b=5, t执行完表达式t=（a>b）?a:b后，t的值是（）",
                "answer": "7"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 426,
            "subjectType": 4,
            "content": "设x的值为15，n的值为3，则表达式x%n运算后，表达式的值为（）",
            "difficultyLevel": 1,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-11-24 20:50:01",
            "items": [{
                "id": 1295,
                "stemId": 426,
                "content": "设x的值为15，n的值为3，则表达式x%n运算后，表达式的值为（）",
                "answer": "0"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }]
    },
    "msg": "根据领域,难度，套数，获取对应套题下的题目列表成功"
}

{
    "status": 1,
    "code": "1001",
    "data": {
        "pageIndex": 0,
        "pageSize": 0,
        "stems": [{
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 427,
            "subjectType": 4,
            "content": "设有宏定义#define pp60 ，则执行赋值语句a==pp*30;（a为int型变量）后，a的值是（）",
            "difficultyLevel": 1,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-11-24 20:50:36",
            "items": [{
                "id": 1296,
                "stemId": 427,
                "content": "设有宏定义#define pp60 ，则执行赋值语句a==pp*30;（a为int型变量）后，a的值是（）",
                "answer": "1800"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 503,
            "subjectType": 4,
            "content": "给定一个Java程序代码，如下：\r\npublic class Test{\r\npublic static void main(String[] args){\r\nString str=*1234;\r\nchangeStr(str);\r\nSystem.out.println(str);\r\n}\r\npublic static void  changeStr(String str){\r\nstr=”welcome”;\r\n}\r\n}\r\n",
            "difficultyLevel": 1,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2018-03-22 19:49:25",
            "items": [{
                "id": 1485,
                "stemId": 503,
                "content": "请回答以上问题",
                "answer": "1234"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 274,
            "subjectType": 4,
            "content": "请写出下面代码的输出\r\nprivate static void addWorld(String msg){\r\nmsg = msg + “world”;\r\n}\r\nPublic static void main(String[] args){\r\nString msg = “Hello.”;\r\naddWord(msg);\r\nSystem.out.pringln(msg);\r\n}",
            "difficultyLevel": 1,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-11-10 11:52:23",
            "items": [{
                "id": 1603,
                "stemId": 274,
                "content": "输出什么",
                "answer": "Hello"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 705,
            "subjectType": 4,
            "content": "请写出下列代码的输出内容",
            "difficultyLevel": 1,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2018-08-25 11:36:40",
            "items": [{
                "id": 1815,
                "stemId": 705,
                "content": "#include<stdio.h>\r\nint main(void)\r\n{\r\nint a,b,c,d;\r\n           a=10;\r\n           b=a++;\r\n           c=++a;\r\n           d=10*a++;\r\n           printf(\"b,c,d:%d,%d，%d,%d\",b,c,d,);\r\n           return 0;\r\n}",
                "answer": "b,c,d:10,12,120"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 710,
            "subjectType": 4,
            "content": "在C#中，关于下面这段代码的说法正确的是（）。\r\nclass Cars\r\n{\r\n      private string name;\r\n      protectde int tires;\r\n      protected void parking()\r\n      {\r\n          int hours;\r\n      }\r\n}\r\nclass Bus:Cars\r\n{\r\n     private sting color;\r\n     public void start(){}\r\n}(选择二项)",
            "difficultyLevel": 1,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2018-08-28 14:06:07",
            "items": [{
                "id": 1826,
                "stemId": 710,
                "content": "a)start()方法中可以访问name变量\r\nb)start()方法中可以访问tires变量\r\nc)start()方法中可以访问parking()方法d\r\nd)以上说法都对\r\n",
                "answer": "b，c"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 777,
            "subjectType": 4,
            "content": "Windows操作系统中PATH环境变量的作用是什么？",
            "difficultyLevel": 1,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2018-12-20 14:46:16",
            "items": [{
                "id": 1959,
                "stemId": 777,
                "content": "Windows操作系统中PATH环境变量的作用是什么？",
                "answer": "PATH环境变量。作用是指定命令搜索路径，如在命令\r\n行下面执行命令如javac编译java程序时，它会到PATH变量所指定的路径中查找看是否能找到相应的命令程序。我们需要把jdk安装目录下的bin目录增加到现有的PATH变量中，bin目录中包含经常要用到的可执行文件如javac/java/javadoc等待，设置好PATH变量后，就可以在任何目录下执行javac/java等工具了。"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 554,
            "subjectType": 4,
            "content": "TestNG中注解有哪些？",
            "difficultyLevel": 1,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2018-04-08 17:41:44",
            "items": [{
                "id": 2343,
                "stemId": 554,
                "content": "请回答上面问题。",
                "answer": "@Test,@BeforeSuite,@AfterSuite,@BeforeTest,@AfterTest,@BeforeClass, @AfterClass,@BeforeMethod, @AfterMethod,@DataProvider"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 570,
            "subjectType": 4,
            "content": "如何使用webdriver执行一个拖拽的操作？\r\n还是使用Actions类，例如：",
            "difficultyLevel": 1,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2018-04-09 11:01:29",
            "items": [{
                "id": 2345,
                "stemId": 570,
                "content": "请回答以上问题",
                "answer": "Actions actions= new Actions(driver);\r\nWebElement element1= driver.findElement(by);\r\nWebElement element2= driver.findElement(by);\r\nactions.dragAndDrop(element1,element2).perform();"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 702,
            "subjectType": 4,
            "content": "请用自己最擅长的编程语言，蒋一个字符串反转并输出？",
            "difficultyLevel": 1,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2018-08-25 10:16:11",
            "items": [{
                "id": 2358,
                "stemId": 702,
                "content": "请用自己最擅长的编程语言，蒋一个字符串反转并输出？",
                "answer": "private static String reverse(String testString) {\r\n\t\tStringBuffer sBuffer = new StringBuffer(testString);\r\n\t\tString processed = sBuffer.reverse().toString();\r\n\t\treturn processed;\r\n\t}"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1219,
            "subjectType": 4,
            "content": "android中，adb桥接，把电脑图片拷贝到手机的指令和把手机图片拷到电脑的指令？",
            "difficultyLevel": 1,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-09-24 11:44:52",
            "items": [{
                "id": 2486,
                "stemId": 1219,
                "content": "android中，adb桥接，把电脑图片拷贝到手机的指令和把手机图片拷到电脑的指令？",
                "answer": "adb push xxx.png /sdcard/\r\nadb pull /sdcard/xxx.png D:\\"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 556,
            "subjectType": 4,
            "content": "TestNG有哪些优点？",
            "difficultyLevel": 1,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2018-04-08 17:48:20",
            "items": [{
                "id": 2499,
                "stemId": 556,
                "content": "请回答上面问题。",
                "answer": "TestNG的注释非常强大和方便\r\nTestNG允许并行测试\r\nTestNG可以基于group的方式执行测试\r\nTestNG可生成测试报表， 并且报告展示多样化，可在其基础上自行开发测试报告插件以及测试监听器等"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 571,
            "subjectType": 4,
            "content": "举一个WebDriver中方法重载的例子",
            "difficultyLevel": 1,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2018-04-09 11:01:56",
            "items": [{
                "id": 2500,
                "stemId": 571,
                "content": "举一个WebDriver中方法重载的例子",
                "answer": "frame(string name), frame(int index), frame(WebElement element)"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 808,
            "subjectType": 4,
            "content": "json和map（字典）的区别？",
            "difficultyLevel": 1,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-03-11 16:35:04",
            "items": [{
                "id": 2504,
                "stemId": 808,
                "content": "json和map（字典）的区别？",
                "answer": "Json是轻量级的数据交互格式，以key-value的键值对形式来保存数据，结构清晰，可以说是目前互联网项目开发中最常用的一种数据交互格式。\r\nMap是字典结构，同样是以key-value的键值对来保存数据，是java中的一种数据类型。"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1254,
            "subjectType": 4,
            "content": "如何定位属性值动态变化的元素？",
            "difficultyLevel": 1,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:51:50",
            "items": [{
                "id": 2584,
                "stemId": 1254,
                "content": "如何定位属性值动态变化的元素？",
                "answer": "元素动态变化有特征，如id属性 lemonxxxxx, xxxx是随机变化的，那么可以根据xpath的contains函数来获取 --> //*[contains(@id,’lemon’)]\r\n如果无特征，根据相对关系定位根据其附近的父节点、子节点、兄弟节点定位"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1255,
            "subjectType": 4,
            "content": "xpath中绝对路径和相对路径有什么区别？",
            "difficultyLevel": 1,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:52:24",
            "items": [{
                "id": 2585,
                "stemId": 1255,
                "content": "xpath中绝对路径和相对路径有什么区别？",
                "answer": "绝对定位\r\n元素的完整路径如：/html/body/div/div/a\r\n相对定位\r\n从dom结构中的任意位置匹配 如：//a"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }]
    },
    "msg": "根据领域,难度，套数，获取对应套题下的题目列表成功"
}

{
    "status": 1,
    "code": "1001",
    "data": {
        "pageIndex": 0,
        "pageSize": 0,
        "stems": [{
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1257,
            "subjectType": 4,
            "content": "请列举出web自动化中你常用的断言（验证）方式",
            "difficultyLevel": 1,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:53:19",
            "items": [{
                "id": 2587,
                "stemId": 1257,
                "content": "请列举出web自动化中你常用的断言（验证）方式",
                "answer": "根据页面的URL\r\n根据页面的标题\r\n根据页面的提示信息\r\n根据某些元素的显示\r\n..."
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1265,
            "subjectType": 4,
            "content": "什么是PO（Page Object）模式？",
            "difficultyLevel": 1,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:56:49",
            "items": [{
                "id": 2595,
                "stemId": 1265,
                "content": "什么是PO（Page Object）模式？",
                "answer": "页面对象模式，对页面进行抽象或者说建模的过程，需要把页面当作一个对象。把页面的一个个的web元素设计为页面对象的属性，把页面上的操作（如点击、输入等）设计为页面对象的行为。这样做的好处是业务和实现分开，使自动化测试脚本具备更高的可维护性。"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1267,
            "subjectType": 4,
            "content": "web自动化用例覆盖率如何？",
            "difficultyLevel": 1,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:57:24",
            "items": [{
                "id": 2597,
                "stemId": 1267,
                "content": "web自动化用例覆盖率如何？",
                "answer": "例如：80%左右，其中包括主流程场景和核心业务"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1278,
            "subjectType": 4,
            "content": "自动化测试用例从哪来？",
            "difficultyLevel": 1,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:01:25",
            "items": [{
                "id": 2608,
                "stemId": 1278,
                "content": "自动化测试用例从哪来？",
                "answer": "从手工用例中提取、要比手工用例更加注重严谨性、步骤的关联性\r\n优先选择冒烟测试用例+业务核心模块用例/稳定的模块"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1281,
            "subjectType": 4,
            "content": "请描述Appium来做Android平台自动化测试原理",
            "difficultyLevel": 1,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:02:43",
            "items": [{
                "id": 2614,
                "stemId": 1281,
                "content": "请描述Appium来做Android平台自动化测试原理",
                "answer": "Appium要能真正自动化手机上的应用必须依赖于各个移动平台所带的自动化框架；\r\nIOS 、Android都有自己的框架， IOS9.3以前用的框架是 uiautomation ，现在用的是XCUITest;\r\nAndroid用的是 uiautomator,现在最新的有个uiautomator2。框架提供的是运行库，运行库运行在移动设备上。"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1286,
            "subjectType": 4,
            "content": "//*[contains(@text,\"登录\")] 是什么意思？",
            "difficultyLevel": 1,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:05:31",
            "items": [{
                "id": 2618,
                "stemId": 1286,
                "content": "//*[contains(@text,\"登录\")] 是什么意思？",
                "answer": "页面结构中查找文本值包含“登录”的元素"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1288,
            "subjectType": 4,
            "content": "什么是activity",
            "difficultyLevel": 1,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:06:21",
            "items": [{
                "id": 2620,
                "stemId": 1288,
                "content": "什么是activity",
                "answer": "Activity是Android的四大组件之一，也是平时我们用到最多的一个组件，可以用来显示View。\r\n官方的说法是Activity一个应用程序的组件，它提供一个屏幕来与用户交互，以便做一些诸如打电话、发邮件和看地图之类的事情，原话如下：\r\nAn Activity is an application component that provides a screen with which users can interact in order to do something, such as dial the phone, take a photo, send an email, or view a map."
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1289,
            "subjectType": 4,
            "content": "Activity生命周期?",
            "difficultyLevel": 1,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:06:45",
            "items": [{
                "id": 2621,
                "stemId": 1289,
                "content": "Activity生命周期?",
                "answer": "周期即活动从开始到结束所经历的各种状态。生命周期即活动从开始到结束所经历的各个状态。从一个状态到另一个状态的转变，从无到有再到无，这样一个过程中所经历的状态就叫做生命周期。\r\n\r\nActivity本质上有四种状态：\r\n\r\n1.运行（Active/Running）:Activity处于活动状态，此时Activity处于栈顶，是可见状态，可以与用户进行交互\r\n\r\n2.暂停（Paused）:当Activity失去焦点时，或被一个新的非全面屏的Activity，或被一个透明的Activity放置在栈顶时，Activity就转化为Paused状态。此刻并不会被销毁，只是失去了与用户交互的能力，其所有的状态信息及其成员变量都还在，只有在系统内存紧张的情况下，才有可能被系统回收掉\r\n\r\n3.停止（Stopped）:当Activity被系统完全覆盖时，被覆盖的Activity就会进入Stopped状态，此时已不在可见，但是资源还是没有被收回\r\n\r\n4.系统回收（Killed）:当Activity被系统回收掉，Activity就处于Killed状态"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1290,
            "subjectType": 4,
            "content": "Android四大组件？",
            "difficultyLevel": 1,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:07:37",
            "items": [{
                "id": 2622,
                "stemId": 1290,
                "content": "Android四大组件？",
                "answer": "Android四大基本组件：Activity、BroadcastReceiver广播接收器、ContentProvider内容提供者、Service服务。"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }]
    },
    "msg": "根据领域,难度，套数，获取对应套题下的题目列表成功"
}


/// Java自动化中级
{
    "status": 1,
    "code": "1001",
    "data": {
        "pageIndex": 0,
        "pageSize": 0,
        "stems": [{
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 279,
            "subjectType": 4,
            "content": "请写出下面代码的输出\r\ntry{\r\n     System.out.println(“try”);\r\n     Return;\r\n} finally{\r\n    System.out.println(“finally”);\r\n}",
            "difficultyLevel": 2,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-11-10 11:54:30",
            "items": [{
                "id": 940,
                "stemId": 279,
                "content": "输出什么",
                "answer": "try\r\nfinally"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 281,
            "subjectType": 4,
            "content": "请优化下面代码的性能\r\nString line = “”\r\nfor (int i = 0; i<10000; i++){\r\n      line += “item_” + i;\r\n} ",
            "difficultyLevel": 2,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-11-10 11:55:10",
            "items": [{
                "id": 942,
                "stemId": 281,
                "content": "请优化下面代码的性能",
                "answer": "StringBuilder stringBuilder = new StringBuilder(\" \");\r\nfor (int i=0; i< 10000; i++){\r\n\tstringBuilder.append(\"item_\" +integer.toString(i));\r\n}"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 284,
            "subjectType": 4,
            "content": "写程序实现递归删除一个目录下的文件和文件夹\r\n",
            "difficultyLevel": 2,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-11-10 11:58:05",
            "items": [{
                "id": 943,
                "stemId": 284,
                "content": "写程序实现递归删除一个目录下的文件和文件夹",
                "answer": "public void deleteAll(File file){\r\n\tif(file.isFile() || file.list().length == 0){\r\n\t\tfile.delete();\r\n\t}else{\r\n\t\tFile[] files = file.listFiles();\r\n\t\tfor(File f : files){\r\n\t\t\tdeleteAll(f);//递归删除每一个文件\r\n\t\t\tf.delete();//删除该文件夹\r\n\t\t}\r\n\t}\r\n}"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 372,
            "subjectType": 4,
            "content": "下面存储器中，不能用来运行程序的有（）\r\n",
            "difficultyLevel": 2,
            "type": 1,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-11-10 14:27:35",
            "items": [{
                "id": 947,
                "stemId": 372,
                "content": "A  NOR FLASH \r\nB  SRAM    \r\nC  NAND FLASH   \r\nD  DRAM",
                "answer": "BC"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 20,
            "subjectType": 4,
            "content": "请使用java的for循环求出1到10的和。",
            "difficultyLevel": 2,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-09-20 16:12:25",
            "items": [{
                "id": 948,
                "stemId": 20,
                "content": "请使用java的for循环求出1到10的和。",
                "answer": "public int sum(int end){\r\n\tint result = 0;\r\n\tfor(int i=1;i<=end;i++){\r\n\t\tresult+=i;\r\n\t}\r\n\treturn result; \r\n}"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 41,
            "subjectType": 4,
            "content": "请用任意一种编程语言完成下列两题\r\n1，2,3.。。。10 求和 ",
            "difficultyLevel": 2,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-09-23 20:25:38",
            "items": [{
                "id": 950,
                "stemId": 41,
                "content": "请用任意一种编程语言完成下列两题\r\n1，2,3.。。。10 求和 ",
                "answer": "public int getSum(){\r\nint result = 0;\r\nfor (int i = 1; i <=10; i++) {\r\nresult+=i;\r\n}\r\nreturn result;\r\n}"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 285,
            "subjectType": 4,
            "content": "请使用一种算法为下面的数组由小到大排序\r\nint[] items =new int[]{1,3,5,7,9,2,4,6,8,0};",
            "difficultyLevel": 2,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-11-10 11:58:35",
            "items": [{
                "id": 951,
                "stemId": 285,
                "content": "请使用一种算法为下面的数组由小到大排序\r\nint[] items =new int[]{1,3,5,7,9,2,4,6,8,0};",
                "answer": "冒泡排序实现排序：\r\nint items[] = {1,3,5,7,9,2,4,6,8,0};  \r\nfor(int i=0;i<items.length;i++){  \r\n    for(int j=0;j<items.length-1-i;j++){  \r\n        if(items[j] > items[j+1]){  \r\n            int temp = items[j];  \r\n            items[j] = items[j+1];  \r\n            items[j+1] = temp;  \r\n        }   \r\n    }  \r\n}  "
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 40,
            "subjectType": 4,
            "content": "请用任意一种编程语言完成下列题目\r\n\r\n99乘法表 ",
            "difficultyLevel": 2,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-09-23 20:24:26",
            "items": [{
                "id": 952,
                "stemId": 40,
                "content": "请用任意一种编程语言完成下列题目\r\n\r\n99乘法表 ",
                "answer": "public void show(){\r\nfor (int i = 1; i <=9; i++) {\r\nfor (int j = 1; j <=i; j++) {\r\nSystem.out.print(i+\"*\"+j+\"=\"+i*j+\" \");\r\n}\r\nSystem.out.println();\r\n}\r\n}"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 283,
            "subjectType": 4,
            "content": "IdentityHashMap m = new IdentityHashMap();\r\n        m.put(“abc”, “a”);\r\n        m.put(“abcd”.substring(0,3), “a”);\r\n        m.put(new String(“abc”), “a”);\r\n        m.put(null,”a”);\r\n",
            "difficultyLevel": 2,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-11-10 11:55:48",
            "items": [{
                "id": 954,
                "stemId": 283,
                "content": "请问 m.size()是？",
                "answer": "4"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 45,
            "subjectType": 4,
            "content": "import javax.servlet.*;\r\nimport javax.servlet.http.*;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\npublic class Servlet extends HttpServlet{\r\npublic void init() throws ServletException{}\r\npublic void service(HttpServletRequest request,\r\nHttpServletResponse response)throws ServletException,\r\nIOException{\r\nPrintWriter out=response.getWriter();\r\nOut.println(“hello!”);\r\n}\r\n}\r\n假如编译Servlet要具备的环境都已经建立好,现在用完全正确的命令编译该文件,对于以下陈述正确的是",
            "difficultyLevel": 2,
            "type": 1,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-09-23 20:27:53",
            "items": [{
                "id": 1198,
                "stemId": 45,
                "content": "A 编译该文件时会提示缺少doGet()或者doPost方法,编译不能够成功通过\r\nB 编译后,把Servlet1.class放在正确的位置,在浏览器中查看该Servlet1,会看到输出文字:”hello!”\r\nC 编译后,把Servlet1.class放在正确的位置,在浏览器中查看该Servlet1,却看不到任何输出文字\r\nD 编译后,把Servlet1.class放在正确的位置,在浏览器中查看该Servlet1,却看到产生运行时错误的出错信息.",
                "answer": "B"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 351,
            "subjectType": 4,
            "content": "字节流和字符流有什么区别?",
            "difficultyLevel": 2,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-11-10 14:16:28",
            "items": [{
                "id": 1203,
                "stemId": 351,
                "content": "字节流和字符流有什么区别?",
                "answer": "先来看一下流的概念：\r\n在程序中所有的数据都是以流的方式进行传输或保存的，程序需要数据的时候要使用输入流读取数据，而当程序需要将一些数据保存起来的时候，就要使用输出流完成。\r\n程序中的输入输出都是以流的形式保存的，流中保存的实际上全都是字节文件。\r\n字节流与字符流\r\n在java.io包中操作文件内容的主要有两大类：字节流、字符流，两类都分为输入和输出操作。在字节流中输出数据主要是使用OutputStream完成，输入使的是InputStream，在字符流中输出主要是使用Writer类完成，输入流主要使用Reader类完成。（这四个都是抽象类）\r\njava中提供了专用于输入输出功能的包Java.io,其中包括：\r\n     InputStream,OutputStream,Reader,Writer\r\n     InputStream 和OutputStream,两个是为字节流设计的,主要用来处理字节或二进制对象,\r\n     Reader和 Writer.两个是为字符流（一个字符占两个字节）设计的,主要用来处理字符或字符串.\r\n\r\n字符流处理的单元为2个字节的Unicode字符，分别操作字符、字符数组或字符串，而字节流处理单元为1个字节，操作字节和字节数组。所以字符流是由Java虚拟机将字节转化为2个字节的Unicode字符为单位的字符而成的，所以它对多国语言支持性比较好！如果是音频文件、图片、歌曲，就用字节流好点，如果是关系到中文（文本）的，用字符流好点\r\n     所有文件的储存是都是字节（byte）的储存，在磁盘上保留的并不是文件的字符而是先把字符编码成字节，再储存这些字节到磁盘。在读取文件（特别是文本文件）时，也是一个字节一个字节地读取以形成字节序列\r\n      字节流可用于任何类型的对象，包括二进制对象，而字符流只能处理字符或者字符串；字节流提供了处理任何类型的IO操作的功能，但它不能直接处理Unicode字符，而字符流就可以\r\n       字节流是最基本的，所有的InputStrem和OutputStream的子类都是,主要用在处理二进制数据，它是按字节来处理的 但实际中很多的数据是文本，又提出了字符流的概念，它是按虚拟机的encode来处理，也就是要进行字符集的转化 这两个之间通过 InputStreamReader,OutputStreamWriter来关联，实际上是通过byte[]和String来关联 在实际开发中出现的汉字问题实际上都是在字符流和字节流之间转化不统一而造成的 "
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 48,
            "subjectType": 4,
            "content": "简述一下冒泡排序的算法，并用java编程实现冒泡排序，将数组int [] a = {9,8,7,2,3,6,5,1,4}里的所有元素进行排序，使其按照从小到大的顺序来排列。 ",
            "difficultyLevel": 2,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-09-23 20:29:14",
            "items": [{
                "id": 1206,
                "stemId": 48,
                "content": "完成以上题目",
                "answer": "算法：重复将相邻的两个数相比，如果左边的数比右边的大，则交换，否则不交换，直到所有的数字按照从小到大的顺序排列。\r\n代码实现：\r\npublic class BubbleSort{\r\npublic static void main(String [] args){\r\nint [] a = {9,8,7,6,5,4,3,2,1};\r\nint temp = 0;\r\nfor(int i=0;i<a.length-1;i++){\r\nfor(int j=0;j<a.length-1-i;j++){\r\nif(a[j]>a[j+1]){\r\ntemp = a[j];\r\na[j] = a[j+1];\r\na[j+1] = temp;\r\n}\r\n}\r\n}\r\n}\r\n}"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 418,
            "subjectType": 4,
            "content": "算法题。一个字符串，如“This is a test ！”，输出“test a is This”。",
            "difficultyLevel": 2,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-11-17 15:18:02",
            "items": [{
                "id": 1260,
                "stemId": 418,
                "content": "算法题。一个字符串，如“This is a test ！”，输出“test a is This”。",
                "answer": "private static void reverse(String input) {\r\n\t\tif(input==null){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tString [] words = input.split(\" \");\r\n\t\tStringBuffer sBuffer = new StringBuffer();\r\n\t\tfor (int i = words.length-1;i>=0;i--) {\r\n\t\t\tsBuffer.append(words[i]);\r\n\t\t\tif(i!=0){\r\n\t\t\t\tsBuffer.append(\" \");\r\n\t\t\t}\r\n\t\t}\r\n\t\tSystem.out.println(sBuffer.toString());\r\n}"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 504,
            "subjectType": 4,
            "content": "编程输出1/1+1/3+1/5+……+1/99的和。",
            "difficultyLevel": 2,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2018-03-22 19:52:27",
            "items": [{
                "id": 1486,
                "stemId": 504,
                "content": "请回答以上问题",
                "answer": "public static void main(String[] args) {\r\n\t\tSystem.out.println(sum(100));\r\n\t}\r\n\tpublic static double sum(int n){\r\n\t\tdouble temp = 0;\r\n\t\tfor (int i = 1; i <=n; i++) {\r\n\t\t\tif(i%2!=0){\r\n\t\t\t\tdouble d_i = i;\r\n\t\t\t\ttemp+=1/d_i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn temp;\r\n\t}\r\n"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 506,
            "subjectType": 4,
            "content": "本题中定义了一个长度为20的整数数组，然后将1~20分别赋给数组元素，计算改数组中所有下标为奇数的元素的和。",
            "difficultyLevel": 2,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2018-03-22 20:03:15",
            "items": [{
                "id": 1491,
                "stemId": 506,
                "content": "pubic class  javal\r\n{\r\npublic   static viod main  (String[]  args){\r\nint  sum；\r\n————————；\r\nint  arrayList[]=new int [20];\r\nfor(int  i=0;i<=19;i++)   arrayList[i]=i+1;\r\nint  pos  =0;\r\nwhile(pos<  20){\r\n   if(_______)\r\n          sum=sum+arrayList[pos];\r\n______________________;\r\n}\r\nSystem.out.println(“sum  =”     +sum);\r\n}\r\n}\r\n",
                "answer": "sum=0;\r\npos % 2 == 1;\r\npos++;\r\n"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }]
    },
    "msg": "根据领域,难度，套数，获取对应套题下的题目列表成功"
}

{
    "status": 1,
    "code": "1001",
    "data": {
        "pageIndex": 0,
        "pageSize": 0,
        "stems": [{
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 521,
            "subjectType": 4,
            "content": "给下面一段函数添加注释，并写出运行结果\r\n#include<studio.h>\r\nInt main()\r\n{\r\nInt  i,t;\r\nt=1;\r\ni=2;\r\nWhile(i<=5)\r\n     {\r\n     t=t*i;\r\n     i=i+l;\r\n     }\r\n     Printf(“%d\\n”,t)\r\n     Return 0;\r\n",
            "difficultyLevel": 2,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2018-03-22 20:19:36",
            "items": [{
                "id": 1506,
                "stemId": 521,
                "content": "请回答以上问题",
                "answer": "//引入标准输入输出函数\r\n#include<stdio.h>\r\n//主函数\r\nvoid main()\r\n{\r\n\t//定义两个整型的变量i和t\r\n\tint i,t;\r\n\t//给i赋初始值1\r\n\ti=1;\r\n\t//给t赋初始值2\r\n\tt=2;\r\n\t//while循环结构，当i<=5时，执行循环体\r\n\twhile(i<=5)\r\n\t{ \r\n\t\t//将t*i的值赋予给t\r\n\t\tt=t*i;\r\n\t\t//变量i进行自加1的操作\r\n\t\ti=i+1;\r\n\t}\r\n\t//打印循环后变量t的值\r\n \tprintf(\"%d\\n\",t); \r\n \t//主函数结束\r\n \treturn 0;\r\n}"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 524,
            "subjectType": 4,
            "content": "下面的代码段，执行之后i和j的值是：（）\r\nInt  i  = 5 ;  int  j ;  j = i ++；",
            "difficultyLevel": 2,
            "type": 1,
            "mark": "1",
            "collection": 0,
            "createtime": "2018-03-22 20:29:35",
            "items": [{
                "id": 1872,
                "stemId": 524,
                "content": "A,5,5\r\nB,5,6\r\nC,6,6\r\nD,6,5",
                "answer": "D"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 541,
            "subjectType": 4,
            "content": "如何去掉列表里重复的元素，说说你的思路。",
            "difficultyLevel": 2,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2018-03-22 20:55:32",
            "items": [{
                "id": 1873,
                "stemId": 541,
                "content": "如何去掉列表里重复的元素，说说你的思路。",
                "answer": "使用list的sort方法，去掉重复的元素"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1139,
            "subjectType": 4,
            "content": "给定fun函数如下，那么fun(10)的输出结果是( )",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-07-31 14:14:35",
            "items": [{
                "id": 2351,
                "stemId": 1139,
                "content": "int fun(int x) {\r\nreturn (x==1) ? 1: (x + fun(x-1));\r\nA.0\r\nB.10\r\nC.55\r\nD.3628800",
                "answer": "C"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1141,
            "subjectType": 4,
            "content": "public class Example {\r\n            String str = new String(\" good ”) ;\r\n            char[]  ch = {'a','b','c };\r\n             public static void main(String args[]) {\r\n                     Example  ex = new Example() ;\r\n                     ex. change(ex. str, ex. ch) ;\r\n                     System. out. print(ex. str + “ and ”）;\r\n                     System. out. print(ex. ch) ;\r\n             }\r\n                    public void change(String str, char ch[] )  {\r\n                    str = \"test ok\";\r\n                    ch[0] ='g';\r\n             }\r\n}",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-07-31 15:01:07",
            "items": [{
                "id": 2353,
                "stemId": 1141,
                "content": "输出结果是什么？",
                "answer": "good and gbc"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 16,
            "subjectType": 4,
            "content": "请设计一个递归程序，求出1到100的和",
            "difficultyLevel": 2,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-09-05 20:25:31",
            "items": [{
                "id": 2468,
                "stemId": 16,
                "content": "请设计一个递归程序，求出1到100的和",
                "answer": "public static int sum(int num){\r\n if(num==1){\r\n         return 1;\r\n     } else{\r\n         return num+sum(num-1);\r\n     }\r\n }"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1210,
            "subjectType": 4,
            "content": "==和equals的区别？",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-09-24 11:41:23",
            "items": [{
                "id": 2477,
                "stemId": 1210,
                "content": "==和equals的区别？",
                "answer": "对于==：\r\n如果是用于基本数据类型的变量比较，则直接比较其存储的 “值”是否相等；\r\n\r\n如果是用于引用类型的变量的比较，则比较的是所指向的对象的地址\r\n\r\n对于equals:\r\nequals方法不能作用于基本数据类型的变量\r\n如果没有对equals方法进行重写，则比较的是引用类型的变量所指向的对象的地址\r\n如String、Date等类对equals方法进行了重写的话，比较的是所指向的对象的内容"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1211,
            "subjectType": 4,
            "content": "容器的的父接口是谁？",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-09-24 11:41:50",
            "items": [{
                "id": 2478,
                "stemId": 1211,
                "content": "容器的的父接口是谁？",
                "answer": "collection接口"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1212,
            "subjectType": 4,
            "content": "Set和List的区别？",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-09-24 11:42:10",
            "items": [{
                "id": 2479,
                "stemId": 1212,
                "content": "Set和List的区别？",
                "answer": "List中存储的数据是有顺序的，并且值允许重复\r\nMap中存储的数据是无序的，它的键是不允许重复的，但是值是允许重复的"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1213,
            "subjectType": 4,
            "content": "怎么遍历ArrayList,LinkList和HashSet的数据  ？",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-09-24 11:42:33",
            "items": [{
                "id": 2480,
                "stemId": 1213,
                "content": "怎么遍历ArrayList,LinkList和HashSet的数据  ？",
                "answer": "（1）、普通for循环\r\n（2）、增强for循环for each\r\n（3）、迭代器Iterator"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1214,
            "subjectType": 4,
            "content": "String,StringBuffer,StringBuilder的区别 ？",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-09-24 11:42:59",
            "items": [{
                "id": 2481,
                "stemId": 1214,
                "content": "String,StringBuffer,StringBuilder的区别 ？",
                "answer": "（1）、运行速度\r\n\tStringBuilder > StringBuffer > String\r\n（2）、线程安全\r\n\tStringBuilder是线程不安全的\r\n\tStringBuffer是线程安全的\r\n\tString是线程安全的\r\n（3）、适用场景\r\n　　StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况\r\n　　StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况\r\n\tString：适用于少量的字符串操作的情况"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1215,
            "subjectType": 4,
            "content": "SSL的对称加密和非对称加密？",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-09-24 11:43:23",
            "items": [{
                "id": 2482,
                "stemId": 1215,
                "content": "SSL的对称加密和非对称加密？",
                "answer": "对称加密：\r\n双方使用的同一个密钥，既可以加密又可以解密，加密与解密都是同一个秘钥\r\n非对称性加密：\r\n非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）。公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密，如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1216,
            "subjectType": 4,
            "content": "https的SSL怎么对数据进行加密，流程是什么？",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-09-24 11:43:42",
            "items": [{
                "id": 2483,
                "stemId": 1216,
                "content": "https的SSL怎么对数据进行加密，流程是什么？",
                "answer": "（1）浏览器发送一个连接请求给服务器;服务器将自己的证书(包含服务器公钥S_PuKey)、对称加密算法种类及其他相关信息返回客户端;\r\n（2）客户端浏览器检查服务器传送到CA证书是否由自己信赖的CA中心签发。若是，执行4步;否则，给客户一个警告信息：询问是否继续访问。\r\n（3）客户端浏览器比较证书里的信息，如证书有效期、服务器域名和公钥S_PK，与服务器传回的信息是否一致，如果一致，则浏览器完成对服务器的身份认证。\r\n（4）服务器要求客户端发送客户端证书(包含客户端公钥C_PuKey)、支持的对称加密方案及其他相关信息。收到后，服务器进行相同的身份认证，若没有通过验证，则拒绝连接;\r\n（5）服务器根据客户端浏览器发送到密码种类，选择一种加密程度最高的方案，用客户端公钥C_PuKey加密后通知到浏览器;\r\n（6）客户端通过私钥C_PrKey解密后，得知服务器选择的加密方案，并选择一个通话密钥key，接着用服务器公钥S_PuKey加密后发送给服务器;\r\n（7）服务器接收到的浏览器传送到消息，用私钥S_PrKey解密，获得通话密钥key。\r\n（8）接下来的数据传输都使用该对称密钥key进行加密。"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1218,
            "subjectType": 4,
            "content": "http接口请求中，服务端响应都包括哪些数据？",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-09-24 11:44:22",
            "items": [{
                "id": 2485,
                "stemId": 1218,
                "content": "http接口请求中，服务端响应都包括哪些数据？",
                "answer": "包括响应行+响应头+响应体\r\n（1）报文协议及版本\r\n（2）状态码及状态描述\r\n（3）响应头\r\n（4）响应体"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1253,
            "subjectType": 4,
            "content": "请列举web自动化中常见的元素定位方式",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:51:02",
            "items": [{
                "id": 2583,
                "stemId": 1253,
                "content": "请列举web自动化中常见的元素定位方式",
                "answer": "id \r\n根据id来获取元素，返回单个元素，id值一般是唯一的\r\nname\r\n根据元素的name属性定位\r\ntagName\r\n根据元素的标签名定位\r\nclassName\r\n根据元素的样式class值定位\r\nlinkText\r\n根据超链接的文本值定位\r\npartialLinkText\r\n根据超链接的部分文本值定位\r\ncssSelector \r\ncss选择器定位\r\nxpath\r\n通过元素的路径来定位"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }]
    },
    "msg": "根据领域,难度，套数，获取对应套题下的题目列表成功"
}

{
    "status": 1,
    "code": "1001",
    "data": {
        "pageIndex": 0,
        "pageSize": 0,
        "stems": [{
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1256,
            "subjectType": 4,
            "content": "Selenium中如何等待元素可见？",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:52:58",
            "items": [{
                "id": 2586,
                "stemId": 1256,
                "content": "Selenium中如何等待元素可见？",
                "answer": "显示等待定制等待的条件\r\n代码如下：\r\nWebDriverWait wait = new WebDriverWait(driver,5);\r\nwait.until(ExpectedConditions.visibilityOfElementLocated(by));"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1258,
            "subjectType": 4,
            "content": "请说出显示等待和隐式等待的区别",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:53:42",
            "items": [{
                "id": 2588,
                "stemId": 1258,
                "content": "请说出显示等待和隐式等待的区别",
                "answer": "隐式等待：通过driver对象给所有的元素设置的全局等待，在设置的时间范围内一直不断去找元素，如果超时则会抛出异常。\r\n显示等待：针对元素设置的等待时间，并且只对该元素有效，用来等待某个条件满足。默认会每间隔0.5秒去找元素，检查元素是否满足等待的条件，超时则会抛出异常。"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1259,
            "subjectType": 4,
            "content": "在selenium运行过程中如何去动态改变元素的属性？",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:54:00",
            "items": [{
                "id": 2589,
                "stemId": 1259,
                "content": "在selenium运行过程中如何去动态改变元素的属性？",
                "answer": "通过javaScipt脚本去操作dom对象"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1261,
            "subjectType": 4,
            "content": "UI自动化测试是否需要做数据库校验？",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:54:36",
            "items": [{
                "id": 2591,
                "stemId": 1261,
                "content": "UI自动化测试是否需要做数据库校验？",
                "answer": "不需要，按照测试金字塔分层，最上层为UI层，中间层为API接口层，最底层为单元测试层。我们可以在API接口层去做数据库校验，在UI层我们只需要模拟用户的操作即可。"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1268,
            "subjectType": 4,
            "content": "调试单个用例或者选择某几个用例执行你是怎么进行的？",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:57:40",
            "items": [{
                "id": 2598,
                "stemId": 1268,
                "content": "调试单个用例或者选择某几个用例执行你是怎么进行的？",
                "answer": "我们的框架是TestNG管理用例的，通过testng的配置文件testng.xml中配置对应的用例即可。"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1273,
            "subjectType": 4,
            "content": "用例失败之后如何截图？",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:59:10",
            "items": [{
                "id": 2603,
                "stemId": 1273,
                "content": "用例失败之后如何截图？",
                "answer": "通过driver的getScreenShotAs方法进行截图，参数类型为OutputType.FILE，返回的File对象通过FileUtils的copyFile方法拷贝到目标File对象中"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1277,
            "subjectType": 4,
            "content": "怎样衡量一个项目是否适合自动化？",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:01:07",
            "items": [{
                "id": 2607,
                "stemId": 1277,
                "content": "怎样衡量一个项目是否适合自动化？",
                "answer": "软件需求变动不频繁 \r\n项目周期足够长\r\n项目资源足够（人力"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1280,
            "subjectType": 4,
            "content": "在App页面中经常有很多提示信息弹出来，请问这些提示信息（toast）怎么获取到？",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:02:27",
            "items": [{
                "id": 2610,
                "stemId": 1280,
                "content": "在App页面中经常有很多提示信息弹出来，请问这些提示信息（toast）怎么获取到？",
                "answer": "要求：android 5.1+系统版本 java-client 5.0.4+\r\n获取方式：\r\n(1) 设置uiautomator2  \r\ndesiredCapabilities.setCapabiliy(“automationName”,”UIAutomator2”);\r\n(2) 获取toast文本信息\r\n//*[contains(@text,\"文本值\")]"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1282,
            "subjectType": 4,
            "content": "如何定位到App页面元素，有哪些工具？",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:03:02",
            "items": [{
                "id": 2612,
                "stemId": 1282,
                "content": "如何定位到App页面元素，有哪些工具？",
                "answer": "对于原生（native）页面元素：\r\n(1) Android SDK自带的uiautomatorviewer.bat工具\r\n(2) Appium desktop中的inspector工具\r\n对于混合应用（Hybrid）中嵌套的web页面元素：\r\n(1) Chrome浏览器的dev tool工具（需要翻墙）\r\n(2) UC开发者工具（不需要翻墙，推荐）"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1285,
            "subjectType": 4,
            "content": "如何获取到测试App的包名及入口类名？",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:05:10",
            "items": [{
                "id": 2617,
                "stemId": 1285,
                "content": "如何获取到测试App的包名及入口类名？",
                "answer": "通过android SDK自带的aapt工具，对应的命令\r\naapt dump badging APK路径解析得到\r\n在结果中搜索package-name即为对应的包名\r\n搜索lunchable-activity即为对应的入口类名"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1287,
            "subjectType": 4,
            "content": "如何在App的滑动列表ListView找到对应的元素并点击",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:06:00",
            "items": [{
                "id": 2619,
                "stemId": 1287,
                "content": "如何在App的滑动列表ListView找到对应的元素并点击",
                "answer": "在java-client中并没有提供ScrollTo方法，不要和JS弄混淆，Appium可以使用uiautomator的\r\nnew UiScrollable(new UiSelector().scrollable(true).instance(0)).scrollIntoView(new UiSelector().textMatches(\\\"\" + selector + \"\\\").instance(0))"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1296,
            "subjectType": 4,
            "content": "app的日志如何抓取?",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:11:03",
            "items": [{
                "id": 2628,
                "stemId": 1296,
                "content": "app的日志如何抓取?",
                "answer": "app本身的日志，可以用logcat抓取\r\nadb logcat >d:\\hello.txt\r\n也可以用ddms抓取，手机连上电脑，打开ddms工具，或者在Android Studio开发工具中，打开DDMS"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 421,
            "subjectType": 4,
            "content": "为以下程序段设计一组测试用例，要求分别满足语句覆盖、判定覆盖、条件覆盖",
            "difficultyLevel": 2,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-11-24 20:05:52",
            "items": [{
                "id": 2631,
                "stemId": 421,
                "content": "void DoWork(int x,int y,int z)\r\n{\r\nInt k=0,j=0;\r\nIf((x>3)&&(z<10))\r\n{ k=x*y-1;\r\nj=sqrt(k);\r\n}   //语句块1\r\nif((x==4)||(y>5))\r\n{\r\nj=x*y+10;\r\n}           //语句块2\r\nj=j%3;   //语句块3\r\n}",
                "answer": "语句覆盖测试用例：\r\nx=4、y=5、z=5； \r\n判定覆盖测试用例：\r\nx=4、y=5、z=5；\r\nx=2、y=5、z=5； \r\n条件覆盖测试用例：\r\nx=4、y=6、z=5；\r\nx=2、y=5、z=15；"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1301,
            "subjectType": 4,
            "content": "Arraylist的linkedList的区别",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-24 14:49:06",
            "items": [{
                "id": 2634,
                "stemId": 1301,
                "content": "Arraylist的linkedList的区别",
                "answer": "底层结构：ArrayList：数组；LinkedList：双链表\r\n适合场景：ArrayList适合查找，linkedlist适合增删"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1302,
            "subjectType": 4,
            "content": "&和&&的区别",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-24 14:50:19",
            "items": [{
                "id": 2635,
                "stemId": 1302,
                "content": "&和&&的区别",
                "answer": "逻辑运算符&：& 和 && 当两边同时为true是结果才为true，区别是&&有短路效果，当左边为false时右边不再运算节省性能。\r\n位运算符&：两个操作数中位都为1，结果才为1，否则结果为0"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }]
    },
    "msg": "根据领域,难度，套数，获取对应套题下的题目列表成功"
}

{
    "status": 1,
    "code": "1001",
    "data": {
        "pageIndex": 0,
        "pageSize": 0,
        "stems": [{
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1303,
            "subjectType": 4,
            "content": "java中常见的数据结构",
            "difficultyLevel": 2,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-24 14:52:21",
            "items": [{
                "id": 2636,
                "stemId": 1303,
                "content": "java中常见的数据结构",
                "answer": "链表（LinkedList）、数组（ArrayList）、栈（Stack）、队列（ArrayBlockingQueue）、哈希表（HashMap）"
            }],
            "suiteId": 4,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }]
    },
    "msg": "根据领域,难度，套数，获取对应套题下的题目列表成功"
}

    
/// java 自动化高级
{
    "status": 1,
    "code": "1001",
    "data": {
        "pageIndex": 0,
        "pageSize": 0,
        "stems": [{
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 17,
            "subjectType": 4,
            "content": "以下哪个是终止循环的关键字\r\n",
            "difficultyLevel": 3,
            "type": 1,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-09-05 20:28:17",
            "items": [{
                "id": 760,
                "stemId": 17,
                "content": "A.continue\r\nB.goto\r\nC.final\r\nD.break",
                "answer": "D"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 306,
            "subjectType": 4,
            "content": "假定数字A[nSize]中有多个0元素，请写一个函数，将A中所有的非0元素一次移到数组A的前端A[i](0<i<nSize)，并将i作为函数的返回值。",
            "difficultyLevel": 3,
            "type": 2,
            "mark": "1",
            "collection": 0,
            "createtime": "2017-11-10 13:47:56",
            "items": [{
                "id": 955,
                "stemId": 306,
                "content": "请写一个函数，将A中所有的非0元素一次移到数组A的前端A[i](0<i<nSize)，并将i作为函数的返回值。",
                "answer": "int fun(int A[])\r\n{\r\n int i,j,tmp;\r\n for (i = 0; i < nSize-1; ++i)\r\n {\r\n  if (A[i] == 0)\r\n  {\r\n   for (j = i+1; j < nSize; ++j)\r\n   {\r\n    if (A[j] != 0)\r\n    {\r\n     tmp = A[i];\r\n     A[i] = A[j];\r\n     A[j] = tmp;\r\n     break;\r\n    }\r\n   }\r\n  }\r\n }\r\n for (i = 0,tmp = 0; i < nSize; ++i)\r\n  if (A[i] != 0) tmp++;\r\n return tmp;\r\n}"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1028,
            "subjectType": 4,
            "content": "为了提高App自动化用例执行的稳定性，你有做了哪些工作？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-03-13 15:56:12",
            "items": [{
                "id": 2213,
                "stemId": 1028,
                "content": "为了提高App自动化用例执行的稳定性，你有做了哪些工作？",
                "answer": "(1)设计类：使用testng单元测试框架组织测试用例、分层设计、PageObject模式、用例解耦，减少用例间的相互依赖。\r\n(2)环境类：adb执行不稳定：PC端屏蔽掉各类软件的干扰（如手机助手类的软件）。windows上adb执行并不太稳定，更换为Linux平台。硬件上选用更加稳定的线缆、如USB分接器、USB线等。\r\n(3)脚本优化类：元素等待：使用自定义智能等待，元素操作：不要使用绝对坐标点击，在不同尺寸的屏幕上无法兼容。"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1029,
            "subjectType": 4,
            "content": "在App页面中经常有很多提示信息弹出来，请问这些提示信息（toast）怎么获取到？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-03-13 15:56:46",
            "items": [{
                "id": 2214,
                "stemId": 1029,
                "content": "在App页面中经常有很多提示信息弹出来，请问这些提示信息（toast）怎么获取到？",
                "answer": "要求：android 5.1+系统版本 java-client 5.0.4+\r\n获取方式：\r\n(1)设置uiautomator2  \r\ndesiredCapabilities.setCapabiliy(“automationName”,”UIAutomator2”);\r\n(2)获取toast文本信息\r\n//*[contains(@text,\"文本值\")]"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1030,
            "subjectType": 4,
            "content": "请描述Appium来做Android平台自动化测试原理",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-03-13 15:57:09",
            "items": [{
                "id": 2215,
                "stemId": 1030,
                "content": "请描述Appium来做Android平台自动化测试原理",
                "answer": "Appium要能真正自动化手机上的应用必须依赖于各个移动平台所带的自动化框架；\r\nIOS 、Android都有自己的框架， IOS9.3以前用的框架是 uiautomation ，现在用的是XCUITest;\r\nAndroid用的是 uiautomator,现在最新的有个uiautomator2。框架提供的是运行库，运行库运行在移动设备上。"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1031,
            "subjectType": 4,
            "content": "如何定位到App页面元素，有哪些工具？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-03-13 15:57:33",
            "items": [{
                "id": 2216,
                "stemId": 1031,
                "content": "如何定位到App页面元素，有哪些工具？",
                "answer": "对于原生（native）页面元素：\r\n(1)Android SDK自带的uiautomatorviewer.bat工具\r\n(2)Appium desktop中的inspector工具\r\n对于混合应用（Hybrid）中嵌套的web页面元素：\r\n(1)Chrome浏览器的dev tool工具（需要翻墙）\r\n(2)UC开发者工具（不需要翻墙，推荐）"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1032,
            "subjectType": 4,
            "content": "Hybrid应用是什么意思？怎么判断？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-03-13 15:57:55",
            "items": [{
                "id": 2217,
                "stemId": 1032,
                "content": "Hybrid应用是什么意思？怎么判断？",
                "answer": "(Hybrid)混合应用程序，在应用程序中嵌入了webview，通过webview访问网页，webview是一个基于webkit引擎，展现web页面的控件 作用： 显示和渲染web界面 直接使用html文件（网络或Apk资源包assets中）作布局 可和JavaScript交互调用 优点： 开发成本较低,可以跨平台,调试方便 维护成本低,功能可复用 功能更加完善,性能和体验要比起web app好太多 更新较为自由 缺点： 相比原生,性能仍然有较大损耗 不适用于交互性较强的app\r\n可以使用开发者选项->显示布局边界进行判断"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1033,
            "subjectType": 4,
            "content": "请列举App页面中常见的布局及控件",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-03-13 15:58:17",
            "items": [{
                "id": 2218,
                "stemId": 1033,
                "content": "请列举App页面中常见的布局及控件",
                "answer": "常见的布局：\r\n线性布局LinearLayout、表格布局TableLayout、相对布局RelativeLayout、帧布局FrameLayout、绝对布局AbsoluteLayout\r\n常见的控件：\r\nTextView 显示文字，文本控件\r\nImageView 显示图片 \r\nEditText 输入框\r\nButton 按钮\r\nCheckBox 复选框 \r\nRadioButton 单选按钮\r\nProgressBar 加载进度条"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1034,
            "subjectType": 4,
            "content": "如何获取到测试App的包名及入口类名？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-03-13 15:58:38",
            "items": [{
                "id": 2219,
                "stemId": 1034,
                "content": "如何获取到测试App的包名及入口类名？",
                "answer": "通过android SDK自带的aapt工具，对应的命令aapt dump badging APK路径解析得到\r\n在结果中搜索package-name即为对应的包名\r\n搜索lunchable-activity即为对应的入口类名"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1035,
            "subjectType": 4,
            "content": "//*[contains(@text,\"登录\")] 是什么意思？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-03-13 15:59:01",
            "items": [{
                "id": 2220,
                "stemId": 1035,
                "content": "//*[contains(@text,\"登录\")] 是什么意思？",
                "answer": "页面结构中查找文本值包含“登录”的元素"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1036,
            "subjectType": 4,
            "content": "如何在App的滑动列表ListView找到对应的元素并点击？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-03-13 15:59:22",
            "items": [{
                "id": 2221,
                "stemId": 1036,
                "content": "如何在App的滑动列表ListView找到对应的元素并点击？",
                "answer": "在java-client中并没有提供ScrollTo方法，不要和JS弄混淆，Appium可以使用uiautomator的\r\nnew UiScrollable(new UiSelector().scrollable(true).instance(0)).scrollIntoView(new UiSelector().textMatches(\\\"\" + selector + \"\\\").instance(0))"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1132,
            "subjectType": 4,
            "content": "小明有一百元，他想买一百本书，英语书5元一本，数学书3元一本，语文书0.5元一本，请问他有多少种买法。请编程解决这个问题，可以使用任何编程语言，包括伪语言。",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2019-04-12 11:11:42",
            "items": [{
                "id": 2464,
                "stemId": 1132,
                "content": "根据题意是要买一百本书，一百块钱，看有多少种买法（钱不一定非要花完，只要能买到一百本书）：\r\n三本书的价格分别为：5,3,0.5\r\n那么能买到最多的数学书为20本，英语书33本，语文书200本。\r\n但是也有组合的买法，所以可以通过一个三重for循环来实现，i,j,k分别代表购买数学，英语，语文书的数量，\r\n循环条件分别是i<=20,j<=33,k<=200,那么只要满足i+j+k==100,5*i+3*j+0.5*k<=100即可。\r\n\r\n最后统计所有的组合就是买法的数量。",
                "answer": "public static void main(String[] args) {\r\n\t\tdouble aPrice = 5;\r\n\t\tdouble bPrice = 3;\r\n\t\tdouble cPrice = 0.5;\r\n\t\tint mark = 0;\r\n\t\tfor (int i = 0; i <=100/aPrice; i++) {\r\n\t\t\tfor (int j = 0; j <=100/bPrice; j++) {\r\n\t\t\t\tfor (int k = 0; k <=100/cPrice; k++) {\r\n\t\t\t\t\t//数量到100，价格小于等于100\r\n\t\t\t\t\tif((i+j+k)==100&aPrice*i+bPrice*j+cPrice*k<=100){\r\n\t\t\t\t\t\tSystem.out.println(\"i=\"+i+\",j=\"+j+\",k=\"+k);\r\n\t\t\t\t\t\t++mark;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tSystem.out.println(\"总共有【\"+mark+\"】种买法\");\r\n\t}"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1260,
            "subjectType": 4,
            "content": "自动化测试模型有哪些？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:54:18",
            "items": [{
                "id": 2590,
                "stemId": 1260,
                "content": "自动化测试模型有哪些？",
                "answer": "线性模型\r\n纯粹的线性脚本，通过selenium IDE录制的脚本就属于这一类\r\n模块化模型\r\n将重复的代码封装成公共模块，比如登录、注册、截图方法\r\n数据驱动模型\r\n通过数据的改变从而驱动自动化测试的执行，最终引起测试结果的改变。典型的如testNG的dataProvider\r\n关键字驱动模型\r\n通过关键字的改变引起测试结果的改变叫关键字驱动测试，如Robot Framework关键字驱动测试框架"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1262,
            "subjectType": 4,
            "content": "UI自动化测试用例如何设计？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:55:11",
            "items": [{
                "id": 2592,
                "stemId": 1262,
                "content": "UI自动化测试用例如何设计？",
                "answer": "UI自动化测试用例是从手工测试用例中提取出来的\r\n跟手工测试用例相比，自动化测试用例更加注重用例的严谨性\r\n选择用例的时候遵循以下原则：\r\n（1）优先选取覆盖产品核心功能的用例\r\n（2）从成本考量，不要选择流程过于复杂的用例\r\n（3）选取的用例可以是重复执行，繁琐的部分，比如字段验证、提示信息验证\r\n（4）优先实现正向的测试用例，反向用例一般情况复杂、数量多"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1263,
            "subjectType": 4,
            "content": "为了提高UI自动化脚本的稳定性，你有做了哪些工作？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:55:28",
            "items": [{
                "id": 2593,
                "stemId": 1263,
                "content": "为了提高UI自动化脚本的稳定性，你有做了哪些工作？",
                "answer": "（1）尽量用相对路径的xpath表达式\r\n（2）查找元素优先用显示等待\r\n（3）用例与用例之间尽量避免产生依赖，用例可以独立执行\r\n（4）用例执行结束后对测试场景进行还原，避免影响其他用例的执行\r\n（5）脚本执行失败后加入TestNG重试机制，提升用例的稳定性\r\n（6）尽量保证单独的测试环境，避免其他的测试同步进行"
            }],
            "suiteId": 1,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }]
    },
    "msg": "根据领域,难度，套数，获取对应套题下的题目列表成功"
}

{
    "status": 1,
    "code": "1001",
    "data": {
        "pageIndex": 0,
        "pageSize": 0,
        "stems": [{
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1264,
            "subjectType": 4,
            "content": "为了提高UI自动化脚本的可维护性，你有做了哪些工作？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:56:32",
            "items": [{
                "id": 2594,
                "stemId": 1264,
                "content": "为了提高UI自动化脚本的可维护性，你有做了哪些工作？",
                "answer": "Page Object分层模式，业务和页面元素分离\r\n测试数据和用例分离，单独维护测试数据\r\n页面和用例共性提取\r\n可追溯日志"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1266,
            "subjectType": 4,
            "content": "维护了多少条web自动化测试用例？稳定性怎么样？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:57:05",
            "items": [{
                "id": 2596,
                "stemId": 1266,
                "content": "维护了多少条web自动化测试用例？稳定性怎么样？",
                "answer": "例如：500+case（不要少于100，否则面试官会认为只是在做初级的自动化而已，应用这套框架，平均每次case的通过率在85%左右，还在持续的优化中。"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1270,
            "subjectType": 4,
            "content": "平常做web自动化有碰到过哪些问题？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:58:15",
            "items": [{
                "id": 2600,
                "stemId": 1270,
                "content": "平常做web自动化有碰到过哪些问题？",
                "answer": "ex：元素定位的坑：iframe、动态id、没加等待、window切换..."
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1271,
            "subjectType": 4,
            "content": "ui自动化实现你认为最困难的地方是什么",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:58:31",
            "items": [{
                "id": 2601,
                "stemId": 1271,
                "content": "ui自动化实现你认为最困难的地方是什么",
                "answer": "比如：\r\n需求经常变动，脚本维护成本高\r\n特殊元素难以定位\r\n脚本执行不稳定，经常性fail"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1272,
            "subjectType": 4,
            "content": "对于登录验证码如何处理？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:58:47",
            "items": [{
                "id": 2602,
                "stemId": 1272,
                "content": "对于登录验证码如何处理？",
                "answer": "测试环境中去除验证码\r\n自动识别验证码技术\r\n万能验证码\r\n设置cookie"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1274,
            "subjectType": 4,
            "content": "selenium中如何实现文件上传",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:59:31",
            "items": [{
                "id": 2604,
                "stemId": 1274,
                "content": "selenium中如何实现文件上传",
                "answer": "对于input类型的元素，可以直接通过sendKeys写入文件的路径即可\r\n对于不能写入路径的，可以使用第三方的工具如：AutoIT"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1275,
            "subjectType": 4,
            "content": "在web自动化中，你一般完成什么类型的测试？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 10:59:58",
            "items": [{
                "id": 2605,
                "stemId": 1275,
                "content": "在web自动化中，你一般完成什么类型的测试？",
                "answer": "冒烟测试+回归性测试\r\n回归性测试的部分主要是选取一些业务核心、相对比较稳定、容易实现的场景"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1276,
            "subjectType": 4,
            "content": "请描述下你所设计的Web自动化框架的特点？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:00:50",
            "items": [{
                "id": 2606,
                "stemId": 1276,
                "content": "请描述下你所设计的Web自动化框架的特点？",
                "answer": "Maven项目构建工具管理项目\r\n通过TestNG单元测试框架组织/管理测试用例\r\n引入Page Object思想对用例进行分层设计，业务和页面元素分离，三层设计：用例层+逻辑操作层+页面对象层\r\n用例共性操作和页面元素共性操作提取\r\n数据驱动DataProvider\r\nlog4j日志，问题定位/追溯\r\nAllure报表，用例失败后截图\r\n用例失败重试，提高用例稳定性\r\n集成到Jenkins中，每天/每小时构建多次\r\n。。。。。。"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1279,
            "subjectType": 4,
            "content": "为了提高App自动化用例执行的稳定性，你有做了哪些工作？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:02:11",
            "items": [{
                "id": 2609,
                "stemId": 1279,
                "content": "为了提高App自动化用例执行的稳定性，你有做了哪些工作？",
                "answer": "(1) 设计类：使用testng单元测试框架组织测试用例、分层设计、PageObject模式、用例解耦，减少用例间的相互依赖。\r\n(2) 环境类：adb执行不稳定：PC端屏蔽掉各类软件的干扰（如手机助手类的软件）。windows上adb执行并不太稳定，更换为Linux平台。硬件上选用更加稳定的线缆、如USB分接器、USB线等。\r\n(3) 脚本优化类：元素等待：使用自定义智能等待，元素操作：不要使用绝对坐标点击，在不同尺寸的屏幕上无法兼容。"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1283,
            "subjectType": 4,
            "content": "Hybrid应用是什么意思？怎么判断？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:03:47",
            "items": [{
                "id": 2615,
                "stemId": 1283,
                "content": "Hybrid应用是什么意思？怎么判断？",
                "answer": "(Hybrid)混合应用程序，在应用程序中嵌入了webview，通过webview访问网页，webview是一个基于webkit引擎，展现web页面的控件 \r\n作用：显示和渲染web界面 直接使用html文件（网络或Apk资源包assets中）作布局 可和JavaScript交互调用 \r\n优点：开发成本较低,可以跨平台,调试方便 维护成本低,功能可复用 功能更加完善,性能和体验要比起web app好太多 更新较为自由 \r\n缺点： 相比原生,性能仍然有较大损耗 不适用于交互性较强的app\r\n可以使用开发者选项->显示布局边界进行判断"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1284,
            "subjectType": 4,
            "content": "请列举App页面中常见的布局及控件",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:04:51",
            "items": [{
                "id": 2616,
                "stemId": 1284,
                "content": "请列举App页面中常见的布局及控件",
                "answer": "常见的布局：\r\n线性布局LinearLayout、表格布局TableLayout、相对布局RelativeLayout、帧布局FrameLayout、绝对布局AbsoluteLayout\r\n常见的控件：\r\nTextView 显示文字，文本控件\r\nImageView 显示图片 \r\nEditText 输入框\r\nButton 按钮\r\nCheckBox 复选框 \r\nRadioButton 单选按钮\r\nProgressBar 加载进度条"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1291,
            "subjectType": 4,
            "content": "app测试和web测试有什么区别？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:07:59",
            "items": [{
                "id": 2623,
                "stemId": 1291,
                "content": "app测试和web测试有什么区别？",
                "answer": "WEB测试和App测试从流程上来说，没有区别。\r\n都需要经历测试计划方案，用例设计，测试执行，缺陷管理，测试报告等相关活动。\r\n从技术上来说，WEB测试和APP测试其测试类型也基本相似，都需要进行功能测试、性能测试、安全性测试、GUI测试等测试类型。\r\n\r\n他们的主要区别在于具体测试的细节和方法有区别，比如：性能测试，在WEB测试只需要测试响应时间这个要素，在App测试中还需要考虑流量测试和耗电量测试。\r\n\r\n兼容性测试：在WEB端是兼容浏览器，在App端兼容的是手机设备。而且相对应的兼容性测试工具也不相同，WEB因为是测试兼容浏览器，所以需要使用不同的浏览器进行兼容性测试（常见的是兼容IE6，IE8，chrome，firefox）如果是手机端，那么就需要兼容不同品牌，不同分辨率，不同android版本甚至不同操作系统的兼容。（常见的兼容方式是兼容市场占用率前N位的手机即可），有时候也可以使用到兼容性测试工具，但WEB兼容性工具多用IETester等工具，而App兼容性测试会使用Testin这样的商业工具也可以做测试。\r\n\r\n安装测试：WEB测试基本上没有客户端层面的安装测试，但是App测试是存在客户端层面的安装测试，那么就具备相关的测试点。\r\n\r\n还有，App测试基于手机设备，还有一些手机设备的专项测试。如交叉事件测试，操作类型测试，网络测试（弱网测试，网络切换）\r\n\r\n交叉事件测试：就是在操作某个软件的时候，来电话、来短信，电量不足提示等外部事件。\r\n\r\n操作类型测试：如横屏测试，手势测试\r\n\r\n网络测试：包含弱网和网络切换测试。需要测试弱网所造成的用户体验，重点要考虑回退和刷新是否会造成二次提交。弱网络的模拟，据说可以用360wifi实现设置。\r\n\r\n从系统架构的层面，WEB测试只要更新了服务器端，客户端就会同步会更新。而且客户端是可以保证每一个用户的客户端完全一致的。但是APP端是不能够保证完全一致的，除非用户更新客户端。如果是APP下修改了服务器端，意味着客户端用户所使用的核心版本都需要进行回归测试一遍。\r\n\r\n还有升级测试：升级测试的提醒机制，升级取消是否会影响原有功能的使用，升级后用户数据是否被清除了。"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1293,
            "subjectType": 4,
            "content": "app出现ANR，是什么原因导致的？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:10:00",
            "items": [{
                "id": 2625,
                "stemId": 1293,
                "content": "app出现ANR，是什么原因导致的？",
                "answer": "那么导致ANR的根本原因是什么呢？简单的总结有以下两点：\r\n1.主线程执行了耗时操作，比如数据库操作或网络编程\r\n2.其他进程（就是其他程序）占用CPU导致本进程得不到CPU时间片，比如其他进程的频繁读写操作可能会导致这个问题。\r\n\r\n细分的话，导致ANR的原因有如下几点：\r\n1.耗时的网络访问\r\n2.大量的数据读写\r\n3.数据库操作\r\n4.硬件操作（比如camera)\r\n5.调用thread的join()方法、sleep()方法、wait()方法或者等待线程锁的时候\r\n6.service binder的数量达到上限\r\n7.system server中发生WatchDog ANR\r\n8.service忙导致超时无响应\r\n9.其他线程持有锁，导致主线程等待超时\r\n10.其它线程终止或崩溃导致主线程一直等待。"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1294,
            "subjectType": 4,
            "content": "App出现crash原因有哪些？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:10:28",
            "items": [{
                "id": 2626,
                "stemId": 1294,
                "content": "App出现crash原因有哪些？",
                "answer": "1.内存管理错误​：可能是可用内存过低，app所需的内存超过设备的限制，app跑不起来导致App crash。\r\n或是内存泄露，程序运行的时间越长，所占用的内存越大，最终用尽全部内存，导致整个系统崩溃。\r\n亦或非授权的内存位置的使用也可能会导致App crash。\r\n2.程序逻辑错误：​数组越界、堆栈溢出、并发操作、逻辑错误。\r\ne.g. app新添加一个未经测试的新功能，调用了一个已释放的指针，运行的时候就会crash。\r\n3.​设备兼容：由于设备多样性，app在不同的设备上可能会有不同的表现。\r\n​4.网络因素：可能是网速欠佳，无法达到app所需的快速响应时间，导致app crash。或者是不同网络的切换也可能会影响app的稳定性。"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }, {
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1295,
            "subjectType": 4,
            "content": "app对于不稳定偶然出现anr和crash时候你是怎么处理的？",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:10:49",
            "items": [{
                "id": 2627,
                "stemId": 1295,
                "content": "app对于不稳定偶然出现anr和crash时候你是怎么处理的？",
                "answer": "app偶然出现anr和crash是比较头疼的问题，由于偶然出现无法复现步骤，这也是一个测试人员必备的技能，需要抓日志。查看日志主要有3个方法：\r\n\r\n方法一：app开发保存错误日志到本地\r\n一般app开发在debug版本，出现anr和crash的时候会自动把日志保存到本地实际的sd卡上，去对应的app目录取出来就可以了\r\n\r\n方法二：实时抓取\r\n当出现偶然的crash时候，这时候可以把手机拉到你们app开发那，手机连上他的开发代码的环境，有ddms会抓日志，这时候出现crash就会记录下来日志。\r\n尽量重复操作让bug复现就可以了\r\n也可以自己开着logcat，保存日志到电脑本地\r\nadb logcat | find \"com.sankuai.meituan\" >d:\\hello.txt\r\n\r\n方法三：第三方sdk统计工具\r\n\r\n一般接入了第三方统计sdk,比如友盟统计，在友盟的后台会抓到报错的日志"
            }],
            "suiteId": 2,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }]
    },
    "msg": "根据领域,难度，套数，获取对应套题下的题目列表成功"
}

{
    "status": 1,
    "code": "1001",
    "data": {
        "pageIndex": 0,
        "pageSize": 0,
        "stems": [{
            "iDisplayStart": 0,
            "iDisplayLength": 0,
            "sEcho": "",
            "id": 1297,
            "subjectType": 4,
            "content": "你平常会看日志吗, 一般会出现哪些异常（Exception）?",
            "difficultyLevel": 3,
            "type": 0,
            "mark": "1",
            "collection": 0,
            "createtime": "2020-02-11 11:11:28",
            "items": [{
                "id": 2629,
                "stemId": 1297,
                "content": "你平常会看日志吗, 一般会出现哪些异常（Exception）?",
                "answer": "这个主要是面试官考察你会不会看日志，是不是看得懂java里面抛出的异常，Exception\r\n\r\n一般面试中java Exception（runtimeException ）是必会被问到的问题\r\napp崩溃的常见原因应该也是这些了。常见的异常列出四五种，是基本要求。\r\n\r\n常见的几种如下：\r\n\r\nNullPointerException - 空指针引用异常\r\nClassCastException - 类型强制转换异常。\r\nIllegalArgumentException - 传递非法参数异常。\r\nArithmeticException - 算术运算异常\r\nArrayStoreException - 向数组中存放与声明类型不兼容对象异常\r\nIndexOutOfBoundsException - 下标越界异常\r\nNegativeArraySizeException - 创建一个大小为负数的数组错误异常\r\nNumberFormatException - 数字格式异常\r\nSecurityException - 安全异常\r\nUnsupportedOperationException - 不支持的操作异常"
            }],
            "suiteId": 3,
            "questionType4Show": "",
            "difficultyLevel4Show": "",
            "subjectType4Show": ""
        }]
    },
    "msg": "根据领域,难度，套数，获取对应套题下的题目列表成功"
}
